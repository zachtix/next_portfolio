// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  // role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id             Int            @id @default(autoincrement())
  name           String
  description    String?
  link           String?
  repoLink       String?
  thumbnailImage String?
  content        String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tags           ProjectTag[]
  stacks         ProjectStack[]
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        Int          @id @default(autoincrement())
  name      String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  projects  ProjectTag[]
}

model Stack {
  id        Int            @id @default(autoincrement())
  name      String
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  projects  ProjectStack[]
}

model ProjectTag {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int
}

model ProjectStack {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  stack     Stack   @relation(fields: [stackId], references: [id], onDelete: Cascade)
  stackId   Int
}
